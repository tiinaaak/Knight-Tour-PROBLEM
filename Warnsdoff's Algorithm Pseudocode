def is_valid_move(x, y, n, visited):
    return (x >= 0 and x < n and y >= 0 and y < n and not visited[x][y])

def count_valid_moves(x, y, n, visited):
    count = 0
    for dx, dy in moves:
        next_x = x + dx
        next_y = y + dy
        if is_valid_move(next_x, next_y, n, visited):
            count += 1
    return count

def get_next_move(x, y, n, visited):
    min_degree = n + 1
    next_x = -1
    next_y = -1
    for dx, dy in moves:
        next_x_temp = x + dx
        next_y_temp = y + dy
        if is_valid_move(next_x_temp, next_y_temp, n, visited):
            degree = count_valid_moves(next_x_temp, next_y_temp, n, visited)
            if degree < min_degree:
                min_degree = degree
                next_x = next_x_temp
                next_y = next_y_temp
    return next_x, next_y

def knight_tour(n):
    # Initialize the chessboard and visited array
    chessboard = [[-1 for _ in range(n)] for _ in range(n)]
    visited = [[False for _ in range(n)] for _ in range(n)]

    # Start from the top-left corner
    x = 0
    y = 0
    move_number = 0
    chessboard[x][y] = move_number
    visited[x][y] = True

    for move_number in range(1, n * n):
        next_x, next_y = get_next_move(x, y, n, visited)
        if next_x == -1 and next_y == -1:
            break
        x = next_x
        y = next_y
        chessboard[x][y] = move_number
        visited[x][y] = True

    # Print the solution
    for row in chessboard:
        print(row)

# Knight's moves
moves = [(-2, -1), (-1, -2), (1, -2), (2, -1), (2, 1), (1, 2), (-1, 2), (-2, 1)]

# Example usage
n = 8
knight_tour(n)
